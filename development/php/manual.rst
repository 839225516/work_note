
《PHP手册》阅读笔记
======================

基本语法
-------------

**标记**

PHP也允许使用短标记 ``<?`` 和 ``?>`` ，但不鼓励使用。只有通过激活php.ini中 ``short_open_tag`` 配置指令或者在编译PHP时使用了配置选项--enable-short-tags时才能使用短标记。

如果文件内容是纯PHP代码，最好在文件末尾删除PHP结束标记。这可以避免在PHP结束标记之后万一意外加入了空格或者换行符，会导致PHP开始输出这些空白，而脚本中此时并无输出的意图。

**注释**

PHP支持C、C++和Unix Shell风格（ ``#`` ，Perl风格）的注释。


类型
----------

PHP支持8种原始数据类型。四种标量类型：boolean（布尔型）、integer（整型）、float（浮点型，也称作double）、string（字符串）；两种复合类型：array（数组）、object（对象）；最后是两种特殊类型：resource（资源）、NULL（无类型）。

另外还有一些伪类型：

- mixed（混合类型）：mixed 说明一个参数可以接受多种不同的（但不一定是所有的）类型，例如 gettype() 可以接受所有的 PHP 类型， str_replace() 可以接受字符串和数组。
- number（数字类型）：number 说明一个参数可以是integer或者float。
- callback（回调类型）
- void：void 作为返回类型意味着函数的返回值是无用的。void 作为参数列表意味着函数不接受任何参数。

以及伪变量 ``$...`` ：在函数原型中，$... 表示等等的意思。当一个函数可以接受任意个参数时使用此变量名。

*变量的类型通常不是由程序员设定的，确切地说，是由 PHP 根据该变量使用的上下文在运行时决定的。*

如果想查看某个表达式的值和类型，用 ``var_dump`` 函数。

gettype()函数用于查看表达式值的类型。

is_type函数集用于判断表达式值是否为某个特定的类型，如is_int(4)，is_string("Hello World!")。

**Boolean布尔类型**

要指定一个布尔值，使用关键字TRUE或FALSE。两者都不区分大小写。

**Integer整型**

整型值可以使用十进制、十六进制、八进制或二进制（自PHP 5.4.0起可用）表示，前面可以加上可选的符号（-或+）。

要使用八进制表达，数字前必须加上 0（零）。要使用十六进制表达，数字前必须加上 0x。要使用二进制表达，数字前必须加上 0b。

PHP中没有整除的运算符。

**String字符串**

一个字符串 string 就是由一系列的字符组成，其中每个字符等同于一个字节。这意味着 PHP 只能支持 256 的字符集，因此不支持 Unicode。

字符串最大可以达到2GB。

关于字符串的4种形式见： `http://youngsterxyf.github.io/2013/03/08/php-basics/#id112 <PHP之道/PHP基础知识/字符串>`_

当字符串用双引号或 heredoc 结构定义时，其中的变量将会被解析。

string 中的字符可以通过一个从 0 开始的下标，用类似 array 结构中的方括号包含对应的数字来访问和修改，比如 $str[42]。可以把 string 当成字符组成的 array。

字符串可以用 '.'（点）运算符连接起来，注意 '+'（加号）运算符没有这个功能。

PHP中的string的实现方式是一个由字节组成的数组再加上一个整数指明缓冲区长度，并无如何将字节转换成字符的信息，这个过程由程序员决定。字符串由什么值来组成并无限制；特别是值为0（Nul bytes）的字节可以处于字符串的任何位置（不过有几个非“二进制安全”的函数，也许会把NUL字节之后的数据全都忽略）。

由于 PHP 并不特别指明字符串的编码，那字符串到底是怎样编码的呢？例如字符串 "á" 到底是等于 "\xE1"（ISO-8859-1），"\xC3\xA1"（UTF-8，C form），"\x61\xCC\x81"（UTF-8，D form）还是任何其它可能的表达呢？答案是字符串会被按照该脚本文件相同的编码方式来编码。因此如果一个脚本的编码是 ISO-8859-1，则其中的字符串也会被编码为 ISO-8859-1，以此类推。

**Array数组**

PHP中的数组实际上是一个有序映射。映射是一种把values关联到keys的类型。key可以是integer或者string，value可以是任意类型。

此外，key会有如下的强制转换：

- 包含有合法整型值的字符串会被转换为整型。如键名"8"实际会被存储为8.但"08"则不会强制转换，因为其不是一个合法的十进制值。
- 浮点数也会被转换为整型，这意味着其小数部分会被舍去。例如键名8.7实际会存储为8。
- 布尔值也会被转换为整型。即true实际会存储为1,而false会被存储为0。
- Null会被转换为空字符串，即键名null实际会存储为""。
- 数组和对象不能被用为键名。坚持这么做会导致警告：Illegal offset type。

如果在数组定义中多个单元都使用了同一个键名，则只保留最后一个，之前的都会被覆盖。

PHP数组可以同时含有integer和string类型的键名，因为PHP实际上并不区分索引数组和关联数组。

unset() 函数允许删除数组中的某个键。但要注意数组将不会重建索引。如果需要删除后重建索引，可以用 array_values() 函数。

数组(Array) 的赋值总是会涉及到值的拷贝。使用引用运算符通过引用来拷贝数组。示例：::

    <?php
    $arr1 = array(2, 3);
    $arr2 = $arr1;
    $arr2[] = 4;    // $arr2 is changed,
                    // $arr1 is still array(2, 3)

    $arr3 = &$arr1;
    $arr3[] = 4;    // now $arr1 and $arr3 are the same
    ?>

数组是有序的。也可以使用不同的排序函数来改变顺序。可以用 count() 函数来数出数组中元素的个数。

**NULL**

在下列情况下一个变量被认为是 NULL：被赋值为NULL、尚未被赋值、被unset()。
