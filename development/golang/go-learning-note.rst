第一章 类型
---------------

引用类型包括slice、map和channel。它们有复杂的内部结构，除了申请内存外，还需要初始化相关属性。

内置函数new计算类型大小，为其分配零值内存，返回指针。而make会被编译器翻译成具体的创建函数，由其分配内存和初始化成员结构，返回对象而非指针。

------

不支持隐式类型转换，即便是从窄向宽转换也不行。

不能将其他类型的值当作bool值使用。

------

字符串是不可变值类型，内部用指针指向UTF-8字节数组。

- 默认值是空字符串""。
- 用索引号访问某字节，如s[i]。
- 不能用序号获取字节元素指针。&s[i]非法。
- 不可变类型，无法修改字节数组。
- 字节数组尾部不包含NULL。

要修改字符串，可先将其转换成``[]rune``或``[]byte``，完成后再转换为``string``。无论哪种转换，都会重新分配内存，并复制字节数组。
::

  s := "abcd"
  bs := []byte(s)
  bs[1] = 'B'
  s2 := string(bs)
  
  u := "电脑"
  us := []rune(u)
  us[1] = '话'
  u2 := string(us)
  
用for循环遍历字符串时，也有byte和rune两种方式。
::

  func main() {
    s := "abc汉字"
    
    for i := 0; i < len(s); i++ { // byte
      fmt.Printf("%c,", s[i])
    }
    
    fmt.Println()
    
    for _, r := range s {     // rune
      fmt.Printf("%c,", r)
    }
  }
  
输出：
::

  a,b,c,æ,±,,å,­,,
  a,b,c,汉,字,
  
